[
  {
    "prompt": "class Rectangle:\n\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n \n    def get_area(self):\n        return self.width * self.height\n \n    def set_width(self, width):\n        self.width = width\n \n    def set_height(self, height):\n        self.height = height",
    "completion": "\n\n\n\nimport pytest\n\ndef test_get_area():\n    rectangle = Rectangle(2, 3)\n    assert rectangle.get_area() == 6\n\ndef test_set_width():\n    rectangle = Rectangle(2, 3)\n    rectangle.set_width(4)\n    assert rectangle.width == 4\n\ndef test_set_height():\n    rectangle = Rectangle(2, 3)\n    rectangle.set_height(5)\n    assert rectangle.height == 5\n\ndef test_set_width_and_height():\n    rectangle = Rectangle(2, 3)\n    rectangle.set_width(4)\n    rectangle.set_height(5)\n    assert rectangle.get_area() == 20\n\n# Example of a failing test:\n\ndef test_set_width_and_height_fail():\n    rectangle = Rectangle(2, 3)\n    rectangle.set_width(4)\n    rectangle.set_height(5)\n    assert rectangle.get_area() == 21"
  },
  {
    "prompt": "def find_max(items):\n    \"\"\"Return the maximum value in the given list of items.\"\"\"\n    max_value = items[0]\n    for item in items:\n        if item > max_value:\n            max_value = item\n    return max_value\n\ndef find_min(items):\n    \"\"\"Return the minimum value in the given list of items.\"\"\"\n    min_value = items[0]\n    for item in items:\n        if item < min_value:\n            min_value = item\n    return min_value\n\ndef fizz_buzz(n):\n    \"\"\"Return a list of numbers from 1 to n, replacing multiples of 3 with \"Fizz\", multiples of 5 with \"Buzz\", and multiples of 3 and 5 with \"FizzBuzz\".\"\"\"\n    return [\"FizzBuzz\" if i % 3 == 0 and i % 5 == 0 else \"Fizz\" if i % 3 == 0 else \"Buzz\" if i % 5 == 0 else i for i in range(1, n + 1)]\n\ndef is_palindrome(s):\n    \"\"\"Return whether the given string is a palindrome.\"\"\"\n    return s == s[::-1]\n\ndef is_prime(n):\n    \"\"\"Return whether the given number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True",
    "completion": "\n\n\n\ndef test_find_max():\n    assert find_max([0, 1, 2, 3, 4]) == 4\n    assert find_max([0, -1, -2, -3, -4]) == 0\n\ndef test_find_min():\n    assert find_min([0, 1, 2, 3, 4]) == 0\n    assert find_min([0, -1, -2, -3, -4]) == -4\n\ndef test_fizz_buzz():\n    assert fizz_buzz(15) == [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n\ndef test_is_palindrome():\n    assert is_palindrome(\"racecar\") == True\n    assert is_palindrome(\"foo\") == False\n\ndef test_is_prime():\n    assert is_prime(1) == False\n    assert is_prime(17) == True\n    assert is_prime(15) == False\n    assert is_prime(2) == True\n    assert is_prime(11) == True\n    assert is_prime(0) == False"
  },
  {
    "prompt": "def is_sorted(items):\n    \"\"\"Return whether the given list of items is sorted.\"\"\"\n    for i in range(len(items) - 1):\n        if items[i] > items[i + 1]:\n            return False\n    return True\n\ndef merge_sort(items):\n    \"\"\"Return the given list of items, sorted.\"\"\"\n    if len(items) <= 1:\n        return items\n    mid = len(items) // 2\n    left = merge_sort(items[:mid])\n    right = merge_sort(items[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    \"\"\"Return the given lists of items, sorted.\"\"\"\n    result = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    result.extend(left)\n    result.extend(right)\n    return result\n\ndef quick_sort(items):\n    \"\"\"Return the given list of items, sorted.\"\"\"\n    if len(items) <= 1:\n        return items\n    pivot = items.pop()\n    left = []\n    right = []\n    for item in items:\n        if item < pivot:\n            left.append(item)\n        else:\n            right.append(item)\n    return quick_sort(left) + [pivot] + quick_sort(right)\n\ndef reverse(s):\n    \"\"\"Return the given string reversed.\"\"\"\n    return s[::-1]\n\ndef selection_sort(items):\n    \"\"\"Return the given list of items, sorted.\"\"\"\n    for i in range(len(items) - 1):\n        min_index = i\n        for j in range(i + 1, len(items)):\n            if items[j] < items[min_index]:\n                min_index = j\n        items[i], items[min_index] = items[min_index], items[i]\n    return items",
    "completion": "\n\ndef test_merge_sort():\n    assert merge_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    assert merge_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_quick_sort():\n    assert quick_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    assert quick_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_reverse():\n    assert reverse(\"foobar\") == \"raboof\"\n    assert reverse(\"stressed\") == \"desserts\"\n\ndef test_selection_sort():\n    assert selection_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    assert selection_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n\ndef test_is_sorted():\n    assert is_sorted([1, 2, 3, 4, 5]) == True\n    assert is_sorted([5, 2, 4, 1, 3]) == False"
  },
  {
    "prompt": "# This file contains graph algorithms, including Djikstra's algorithm, and a graph class.\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n\nclass Graph:\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = defaultdict(list)\n\n    def add_edge(self, u, v, w):\n        self.graph[u].append((v, w))\n        self.graph[v].append((u, w))\n\n    def dijkstra(self, src):\n        dist = [float(\"Inf\")] * self.V\n        dist[src] = 0\n        pq = []\n        heappush(pq, (0, src))\n\n        while pq:\n            u = heappop(pq)[1]\n            for v, w in self.graph[u]:\n                if dist[v] > dist[u] + w:\n                    dist[v] = dist[u] + w\n                    heappush(pq, (dist[v], v))\n\n        return dist",
    "completion": "\n\n\n\ndef test_graph():\n    g = Graph(4)\n    g.add_edge(0, 1, 1)\n    g.add_edge(0, 2, 2)\n    g.add_edge(1, 2, 3)\n    g.add_edge(2, 3, 4)\n    g.add_edge(3, 0, 5)\n    assert g.dijkstra(0) == [0, 1, 2, 6]\n\ndef test_graph2():\n    g = Graph(4)\n    g.add_edge(0, 1, 1)\n    g.add_edge(0, 2, 2)\n    g.add_edge(1, 2, 3)\n    g.add_edge(2, 3, 4)\n    g.add_edge(3, 0, 5)\n    assert g.dijkstra(1) == [float(\"Inf\"), 0, 3, 7]\n\ndef test_graph3():\n    g = Graph(4)\n    g.add_edge(0, 1, 1)\n    g.add_edge(0, 2, 2)\n    g.add_edge(1, 2, 3)\n    g.add_edge(2, 3, 4)\n    g.add_edge(3, 0, 5)\n    assert g.dijkstra(2) == [float(\"Inf\"), float(\"Inf\"), 0, 4]\n\ndef test_graph4():\n    g = Graph(4)\n    g.add_edge(0, 1, 1)\n    g.add_edge(0, 2, 2)\n    g.add_edge(1, 2, 3)\n    g.add_edge(2, 3, 4)\n    g.add_edge(3, 0, 5)\n    assert g.dijkstra(3) == [5, 6, 10, 0]"
  },
  {
    "prompt": "def sum_of_digits(n):\n    \"\"\"Return the sum of the digits of the given number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef sum_of_squares(n):\n    \"\"\"Return the sum of the squares of the numbers from 1 to n.\"\"\"\n    return sum(i ** 2 for i in range(1, n + 1))\n\ndef sum_of_squares_of_digits(n):\n    \"\"\"Return the sum of the squares of the digits of the given number.\"\"\"\n    return sum(int(digit) ** 2 for digit in str(n))",
    "completion": "\n\ndef test_sum_of_digits():\n    assert sum_of_digits(12) == 3\n    assert sum_of_digits(123456789) == 45\n    assert sum_of_digits(0) == 0\n    assert sum_of_digits(-1) == 1\n    assert sum_of_digits(10) == 1\n\ndef test_sum_of_squares():\n    assert sum_of_squares(1) == 1\n    assert sum_of_squares(2) == 5\n    assert sum_of_squares(3) == 14\n    assert sum_of_squares(4) == 30\n    assert sum_of_squares(5) == 55\n\ndef test_sum_of_squares_of_digits():\n    assert sum_of_squares_of_digits(1) == 1\n    assert sum_of_squares_of_digits(12) == 5\n    assert sum_of_squares_of_digits(123) == 14\n    assert sum_of_squares_of_digits(1234) == 30\n    assert sum_of_squares_of_digits(12345) == 55"
  },
  {
    "prompt": "class RGB:\n    def __init__(self, red, green, blue):\n        self.red = red\n        self.green = green\n        self.blue = blue\n    \n    def __str__(self):\n        return f\"RGB({self.red}, {self.green}, {self.blue})\"\n    \n    def __repr__(self):\n        return self.__str__()\n\n    def __eq__(self, other):\n        return self.red == other.red and self.green == other.green and self.blue == other.blue\n    \n    def __add__(self, other):\n        return RGB(min(255, self.red + other.red), min(255, self.green + other.green), min(255, self.blue + other.blue))\n    \n    def __sub__(self, other):\n        return RGB(max(0, self.red - other.red), max(0, self.green - other.green), max(0, self.blue - other.blue))",
    "completion": "\n\n\n# For example, you might want to check that the above code works for RGB(0, 0, 0) and RGB(255, 255, 255).\n\ndef test_addition():\n    assert RGB(255, 255, 255) == RGB(255, 255, 255) + RGB(0, 0, 0)\n\ndef test_subtraction():\n    assert RGB(0, 0, 0) == RGB(0, 0, 0) - RGB(255, 255, 255)\n\ndef test_addition_overflow():\n    assert RGB(255, 255, 255) == RGB(255, 255, 255) + RGB(255, 255, 255)\n\ndef test_subtraction_underflow():\n    assert RGB(0, 0, 0) == RGB(0, 0, 0) - RGB(255, 255, 255)\n"
  },
  {
    "prompt": "class Rectangle:\n\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n \n    def get_area(self):\n        return self.width * self.height\n \n    def set_width(self, width):\n        self.width = width\n \n    def set_height(self, height):\n        self.height = height",
    "completion": "\n\n\n# Run them from the command line using: pytest -v\n\n# TODO: Add your tests here.\n\ndef test_width_and_height():\n    r = Rectangle(10, 20)\n    assert r.width == 10\n    assert r.height == 20\n\ndef test_get_area():\n    r = Rectangle(10, 20)\n    assert r.get_area() == 200\n\ndef test_set_width():\n    r = Rectangle(10, 20)\n    r.set_width(100)\n    assert r.width == 100\n\ndef test_set_height():\n    r = Rectangle(10, 20)\n    r.set_height(100)\n    assert r.height == 100"
  }
]
