/* tslint:disable */
/* eslint-disable */
/**
 * Continue API
 * Continue API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RangeInFile } from './RangeInFile';
import {
    RangeInFileFromJSON,
    RangeInFileFromJSONTyped,
    RangeInFileToJSON,
} from './RangeInFile';

/**
 * 
 * @export
 * @interface SerializedDebugContext
 */
export interface SerializedDebugContext {
    /**
     * 
     * @type {string}
     * @memberof SerializedDebugContext
     */
    traceback: string;
    /**
     * 
     * @type {Array<RangeInFile>}
     * @memberof SerializedDebugContext
     */
    rangesInFiles: Array<RangeInFile>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof SerializedDebugContext
     */
    filesystem: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof SerializedDebugContext
     */
    description: string;
}

/**
 * Check if a given object implements the SerializedDebugContext interface.
 */
export function instanceOfSerializedDebugContext(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "traceback" in value;
    isInstance = isInstance && "rangesInFiles" in value;
    isInstance = isInstance && "filesystem" in value;
    isInstance = isInstance && "description" in value;

    return isInstance;
}

export function SerializedDebugContextFromJSON(json: any): SerializedDebugContext {
    return SerializedDebugContextFromJSONTyped(json, false);
}

export function SerializedDebugContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): SerializedDebugContext {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'traceback': json['traceback'],
        'rangesInFiles': ((json['ranges_in_files'] as Array<any>).map(RangeInFileFromJSON)),
        'filesystem': json['filesystem'],
        'description': json['description'],
    };
}

export function SerializedDebugContextToJSON(value?: SerializedDebugContext | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'traceback': value.traceback,
        'ranges_in_files': ((value.rangesInFiles as Array<any>).map(RangeInFileToJSON)),
        'filesystem': value.filesystem,
        'description': value.description,
    };
}

