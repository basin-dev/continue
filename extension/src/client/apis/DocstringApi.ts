/* tslint:disable */
/* eslint-disable */
/**
 * Continue API
 * Continue API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface ForlineDocstringForlineGetRequest {
    userid: string;
    filecontents: string;
    lineno: number;
    format?: string;
}

/**
 * 
 */
export class DocstringApi extends runtime.BaseAPI {

    /**
     * Write a docstring for a function at a line number
     * Forline
     */
    async forlineDocstringForlineGetRaw(requestParameters: ForlineDocstringForlineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.userid === null || requestParameters.userid === undefined) {
            throw new runtime.RequiredError('userid','Required parameter requestParameters.userid was null or undefined when calling forlineDocstringForlineGet.');
        }

        if (requestParameters.filecontents === null || requestParameters.filecontents === undefined) {
            throw new runtime.RequiredError('filecontents','Required parameter requestParameters.filecontents was null or undefined when calling forlineDocstringForlineGet.');
        }

        if (requestParameters.lineno === null || requestParameters.lineno === undefined) {
            throw new runtime.RequiredError('lineno','Required parameter requestParameters.lineno was null or undefined when calling forlineDocstringForlineGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.userid !== undefined) {
            queryParameters['userid'] = requestParameters.userid;
        }

        if (requestParameters.filecontents !== undefined) {
            queryParameters['filecontents'] = requestParameters.filecontents;
        }

        if (requestParameters.lineno !== undefined) {
            queryParameters['lineno'] = requestParameters.lineno;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/docstring/forline`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Write a docstring for a function at a line number
     * Forline
     */
    async forlineDocstringForlineGet(requestParameters: ForlineDocstringForlineGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.forlineDocstringForlineGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
