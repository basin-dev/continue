import React, { useCallback, useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { selectChatMessages } from "../../redux/selectors/chatSelectors";
import MessageDiv from "./MessageDiv";
import styled from "styled-components";
import { addMessage, setIsStreaming } from "../../redux/slices/chatSlice";
import { AnyAction, Dispatch } from "@reduxjs/toolkit";
import { closeStream, streamUpdate } from "../../redux/slices/chatSlice";
import { ChatMessage, RootStore } from "../../redux/store";
import { postVscMessage, vscRequest } from "../../vscode";
import { defaultBorderRadius } from "../../components";
import { selectHighlightedCode } from "../../redux/selectors/miscSelectors";
import { readRangeInVirtualFileSystem } from "../../util";
import { selectDebugContext } from "../../redux/selectors/debugContextSelectors";

function streamToStateThunk(
  dispatch: Dispatch<AnyAction>,
  getResponse: () => Promise<Response>
) {
  getResponse().then((resp) => {
    if (resp.body) {
      resp.body.pipeTo(
        new WritableStream({
          write(chunk) {
            let update = new TextDecoder("utf-8").decode(chunk);
            dispatch(streamUpdate(update));
          },
          close() {
            dispatch(closeStream());
          },
        })
      );
    }
  });
}

let textEntryBarHeight = "30px";

const ChatContainer = styled.div`
  display: grid;
  grid-template-rows: 1fr auto;
  height: 100%;
`;

const MessagesContainer = styled.div`
  overflow-y: scroll;
`;

const BottomDiv = styled.div`
  display: grid;
  grid-template-rows: auto ${textEntryBarHeight};
`;

const BottomButton = styled.button`
  font-size: 10px;
  border: none;
  color: white;
  cursor: pointer;
  background-color: gray;
  border-radius: ${defaultBorderRadius};
  padding: 8px;
`;

const TextEntryBar = styled.input`
  height: ${textEntryBarHeight};
  border-bottom-left-radius: ${defaultBorderRadius};
  border-bottom-right-radius: ${defaultBorderRadius};
  padding: 8px;
  border: 1px solid white;
  background-color: black;
  color: white;
  outline: none;
`;

function ChatTab() {
  const dispatch = useDispatch();
  const chatMessages = useSelector(selectChatMessages);
  const isStreaming = useSelector((state: RootStore) => state.chat.isStreaming);
  const baseUrl = useSelector((state: RootStore) => state.config.apiUrl);
  const debugContext = useSelector(selectDebugContext);

  const [includeHighlightedCode, setIncludeHighlightedCode] = useState(true);
  const [writeCodeAtCursor, setWriteCodeAtCursor] = useState(false);
  const [replaceHighlightedCode, setReplaceHighlightedCode] = useState(false);

  const highlightedCode = useSelector(selectHighlightedCode);

  const compileHiddenChatMessages = useCallback(async () => {
    if (
      includeHighlightedCode &&
      highlightedCode?.filepath !== undefined &&
      highlightedCode?.range !== undefined &&
      debugContext.filesystem[highlightedCode.filepath] !== undefined
    ) {
      return [
        {
          role: "user",
          content: readRangeInVirtualFileSystem(
            highlightedCode,
            debugContext.filesystem
          ),
        },
        {
          role: "user",
          content:
            "Use the above code to help you answer the question below. Respond in markdown if using bullets or other special formatting, being sure to specify language for code blocks.",
        },
      ];
    } else {
      return [];
      let data = await vscRequest("queryEmbeddings", {
        query: chatMessages[chatMessages.length - 1].content,
      });
      let codeContextMessages = data.results.map(
        (result: { id: string; document: string }) => {
          let msg: ChatMessage = {
            role: "user",
            content: `File: ${result.id} \n ${result.document}`,
          };
          return msg;
        }
      );
      codeContextMessages.push({
        role: "user",
        content:
          "Use the above code to help you answer the question below. Answer in asterisk bullet points, and give the full path whenever you reference files.",
      });

      return codeContextMessages;
    }
  }, [highlightedCode, chatMessages]);

  useEffect(() => {
    if (
      chatMessages.length > 0 &&
      chatMessages[chatMessages.length - 1].role === "user" &&
      !isStreaming
    ) {
      dispatch(setIsStreaming(true));
      streamToStateThunk(dispatch, async () => {
        if (chatMessages.length === 0) {
          return new Promise((resolve, _) => resolve(new Response()));
        }
        let hiddenChatMessages = await compileHiddenChatMessages();
        let augmentedMessages = [
          ...chatMessages.slice(0, -1),
          ...hiddenChatMessages,
          chatMessages[chatMessages.length - 1],
        ];
        console.log(augmentedMessages);
        // The autogenerated client can't handle streams, so have to go raw
        return fetch(`${baseUrl}/chat/complete`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            messages: augmentedMessages,
          }),
        });
      });
    }
  }, [chatMessages, dispatch, isStreaming, highlightedCode]);

  return (
    <ChatContainer>
      <div className="mx-5">
        <h1>Chat</h1>
        <MessagesContainer>
          {chatMessages.map((message, idx) => {
            return <MessageDiv key={idx} {...message}></MessageDiv>;
          })}
        </MessagesContainer>
      </div>

      <BottomDiv>
        <div className="h-12 bg-secondary-">
          {highlightedCode?.range !== undefined &&
            highlightedCode.range.start !== highlightedCode.range.end && (
              <div className="flex items-center justify-right p-2">
                {/* <BottomButton
                  className="ml-auto"
                  onClick={() => setWriteCodeAtCursor(!writeCodeAtCursor)}
                >
                  Write code at cursor
                </BottomButton>
                <BottomButton
                  onClick={() =>
                    setReplaceHighlightedCode(!replaceHighlightedCode)
                  }
                >
                  Replace highlighted code
                </BottomButton> */}

                <BottomButton
                  className="ml-auto"
                  onClick={() => {
                    setIncludeHighlightedCode(!includeHighlightedCode);
                  }}
                >
                  {includeHighlightedCode
                    ? "Including highlighted code"
                    : "Click to include highlighted code"}
                </BottomButton>
              </div>
            )}
        </div>
        <TextEntryBar
          type="text"
          placeholder="Enter your message here"
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              console.log("Sending message", e.currentTarget.value);
              dispatch(
                addMessage({ content: e.currentTarget.value, role: "user" })
              );
              (e.target as any).value = "";
            }
          }}
        ></TextEntryBar>
      </BottomDiv>
    </ChatContainer>
  );
}

export default ChatTab;
